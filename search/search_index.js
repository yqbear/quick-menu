var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to quick-menu","text":"<p>This is a simple package to create text menus for use in console applications.</p>"},{"location":"index.html#api","title":"API","text":"<p>Provide a simple means to create text menus for a console application.</p> Example <p>This example shows two ways to create a menu, one for the submenu and the other for the main menu.</p> <pre><code>from quick_menu.menu import Menu, MenuItem\n\ndef func1(val=1):\n    print(\"func1: val =\", val)\n    input(\"\\nPress [Enter] to continue\")\n\nsubmenu = Menu(\"Submenu\", menu_items=[\n    MenuItem(\"1\", \"Do func1\", action=func1),\n    MenuItem(\"X\", \"Go back\", is_exit=True),\n])\nmenu = (\n    Menu(\"Some Title\")\n    .add(MenuItem(\"1\", \"Func1 default\", action=func1))\n    .add(MenuItem(\"2\", \"Func1 with val\", action=func1, kwargs={\"val\": 4}))\n    .add(MenuItem(\"S\", \"Submenu\", action=submenu.run))\n    .add(MenuItem(\"X\", \"Exit\", is_exit=True))\n)\n\nmenu.run()\n</code></pre>"},{"location":"index.html#quick_menu.menu.Menu","title":"<code>Menu</code>","text":"<p>A menu that can be displayed and accepts user selections.</p> Source code in <code>src/quick_menu/menu.py</code> <pre><code>class Menu:\n\"\"\"A menu that can be displayed and accepts user selections.\"\"\"\nBANNER_WIDTH: int = 40\ndef __init__(\nself,\ntitle: str,\nmenu_items: list[MenuItem] | None = None,\nprompt: str | None = None,\nauto_clear: bool | None = None,\n):\n\"\"\"Create a new menu.\n        Parameters:\n            title: The title to display at the top of the menu.\n            menu_items: An optional list of `MenuItem` to add to the menu.\n            prompt:     An optional custom prompt for input.\n            auto_clear:  Whether or not to clear the screen before running.\n        \"\"\"\nself.title = title\nself.menu_items: dict[str, MenuItem] = {}\nif menu_items:\nfor menu_item in menu_items:\nself.add(menu_item)\nself.prompt = prompt if prompt else \"&gt;&gt; \"\nself.auto_clear = auto_clear if auto_clear else True\ndef add(self, menu_item: MenuItem) -&gt; Self:\n\"\"\"Add a new MenuItem.\n        Parameters:\n            menu_item: A `MenuItem` instance.\n        Returns:\n            The `Menu` instance. This allows chaining of the `add` calls. For example:\n                    menu.add(\"1\", \"First\").add(\"2\", \"Second\")\n        \"\"\"\nself.menu_items[menu_item.choice.lower()] = menu_item\nreturn self\ndef display(self) -&gt; str:\n\"\"\"Return the Menu display as a string.\"\"\"\ntitle_length = len(self.title) + 2\nright_length = (Menu.BANNER_WIDTH - title_length) // 2\nleft_length = Menu.BANNER_WIDTH - title_length - right_length\nout = [\" \".join([\"=\" * left_length, self.title, \"=\" * right_length])]\nfor key in sorted(self.menu_items):\nmenu_item = self.menu_items[key]\nout.append(f\"{menu_item.choice}: {menu_item.label}\")\nout.append(\"=\" * Menu.BANNER_WIDTH)\nreturn \"\\n\".join(out)\ndef run(self) -&gt; None:\n\"\"\"Display the `Menu` and start a loop to process selections.\"\"\"\nrunning = True\nwhile running:\nif self.auto_clear:\nMenu.clear()\nprint(self.display())\nchoice = input(self.prompt)\nkey = choice.lower()\nif key in self.menu_items:\nrunning = self.menu_items[key].select()\nelse:\nprint(f\"Invalid choice: {choice}\")\ninput(\"\\nPress [Enter] to continue\")\n@staticmethod\ndef clear() -&gt; None:\n\"\"\"Calls a system method to clear the console.\"\"\"\nos.system(\"clear\" if os.name == \"posix\" else \"cls\")\n</code></pre>"},{"location":"index.html#quick_menu.menu.Menu.__init__","title":"<code>__init__(title, menu_items=None, prompt=None, auto_clear=None)</code>","text":"<p>Create a new menu.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title to display at the top of the menu.</p> required <code>menu_items</code> <code>list[MenuItem] | None</code> <p>An optional list of <code>MenuItem</code> to add to the menu.</p> <code>None</code> <code>prompt</code> <code>str | None</code> <p>An optional custom prompt for input.</p> <code>None</code> <code>auto_clear</code> <code>bool | None</code> <p>Whether or not to clear the screen before running.</p> <code>None</code> Source code in <code>src/quick_menu/menu.py</code> <pre><code>def __init__(\nself,\ntitle: str,\nmenu_items: list[MenuItem] | None = None,\nprompt: str | None = None,\nauto_clear: bool | None = None,\n):\n\"\"\"Create a new menu.\n    Parameters:\n        title: The title to display at the top of the menu.\n        menu_items: An optional list of `MenuItem` to add to the menu.\n        prompt:     An optional custom prompt for input.\n        auto_clear:  Whether or not to clear the screen before running.\n    \"\"\"\nself.title = title\nself.menu_items: dict[str, MenuItem] = {}\nif menu_items:\nfor menu_item in menu_items:\nself.add(menu_item)\nself.prompt = prompt if prompt else \"&gt;&gt; \"\nself.auto_clear = auto_clear if auto_clear else True\n</code></pre>"},{"location":"index.html#quick_menu.menu.Menu.add","title":"<code>add(menu_item)</code>","text":"<p>Add a new MenuItem.</p> <p>Parameters:</p> Name Type Description Default <code>menu_item</code> <code>MenuItem</code> <p>A <code>MenuItem</code> instance.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The <code>Menu</code> instance. This allows chaining of the <code>add</code> calls. For example:</p> <pre><code>menu.add(\"1\", \"First\").add(\"2\", \"Second\")\n</code></pre> Source code in <code>src/quick_menu/menu.py</code> <pre><code>def add(self, menu_item: MenuItem) -&gt; Self:\n\"\"\"Add a new MenuItem.\n    Parameters:\n        menu_item: A `MenuItem` instance.\n    Returns:\n        The `Menu` instance. This allows chaining of the `add` calls. For example:\n                menu.add(\"1\", \"First\").add(\"2\", \"Second\")\n    \"\"\"\nself.menu_items[menu_item.choice.lower()] = menu_item\nreturn self\n</code></pre>"},{"location":"index.html#quick_menu.menu.Menu.clear","title":"<code>clear()</code>  <code>staticmethod</code>","text":"<p>Calls a system method to clear the console.</p> Source code in <code>src/quick_menu/menu.py</code> <pre><code>@staticmethod\ndef clear() -&gt; None:\n\"\"\"Calls a system method to clear the console.\"\"\"\nos.system(\"clear\" if os.name == \"posix\" else \"cls\")\n</code></pre>"},{"location":"index.html#quick_menu.menu.Menu.display","title":"<code>display()</code>","text":"<p>Return the Menu display as a string.</p> Source code in <code>src/quick_menu/menu.py</code> <pre><code>def display(self) -&gt; str:\n\"\"\"Return the Menu display as a string.\"\"\"\ntitle_length = len(self.title) + 2\nright_length = (Menu.BANNER_WIDTH - title_length) // 2\nleft_length = Menu.BANNER_WIDTH - title_length - right_length\nout = [\" \".join([\"=\" * left_length, self.title, \"=\" * right_length])]\nfor key in sorted(self.menu_items):\nmenu_item = self.menu_items[key]\nout.append(f\"{menu_item.choice}: {menu_item.label}\")\nout.append(\"=\" * Menu.BANNER_WIDTH)\nreturn \"\\n\".join(out)\n</code></pre>"},{"location":"index.html#quick_menu.menu.Menu.run","title":"<code>run()</code>","text":"<p>Display the <code>Menu</code> and start a loop to process selections.</p> Source code in <code>src/quick_menu/menu.py</code> <pre><code>def run(self) -&gt; None:\n\"\"\"Display the `Menu` and start a loop to process selections.\"\"\"\nrunning = True\nwhile running:\nif self.auto_clear:\nMenu.clear()\nprint(self.display())\nchoice = input(self.prompt)\nkey = choice.lower()\nif key in self.menu_items:\nrunning = self.menu_items[key].select()\nelse:\nprint(f\"Invalid choice: {choice}\")\ninput(\"\\nPress [Enter] to continue\")\n</code></pre>"},{"location":"index.html#quick_menu.menu.MenuItem","title":"<code>MenuItem</code>  <code>dataclass</code>","text":"<p>A menu item to add to a menu.</p> <p>The menu item can optionally call a function or start a submenu. A menu item can also be an exit item which exits the curren menu.</p> Note <p>The <code>action</code>, <code>kwargs</code>, and <code>is_exit</code> parameters are keyword only arguments.</p> <p>Parameters:</p> Name Type Description Default <code>choice</code> <code>str</code> <p>The string used to select the menu item.</p> required <code>label</code> <code>str</code> <p>The text label displayed for the menu item.</p> required <code>action</code> <code>Optional[Callable[..., None]]</code> <p>An optional function to be called when the menu item is selected.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>Arguments to pass to a menu item action.</p> <code>field(default_factory=dict)</code> <code>is_exit</code> <code>bool</code> <p>Whether or not this menu item exits the current menu</p> <code>False</code> Source code in <code>src/quick_menu/menu.py</code> <pre><code>@dataclass\nclass MenuItem:\n\"\"\"A menu item to add to a menu.\n    The menu item can optionally call a function or start a submenu. A menu item can\n    also be an exit item which exits the curren menu.\n    Note:\n        The `action`, `kwargs`, and `is_exit` parameters are keyword only arguments.\n    Parameters:\n        choice:  The string used to select the menu item.\n        label:   The text label displayed for the menu item.\n        action:  An optional function to be called when the menu item is selected.\n        kwargs:  Arguments to pass to a menu item action.\n        is_exit: Whether or not this menu item exits the current menu\n    \"\"\"\nchoice: str\nlabel: str\n_: KW_ONLY\naction: Optional[Callable[..., None]] = None\nkwargs: dict = field(default_factory=dict)\nis_exit: bool = False\ndef select(self):\n\"\"\"Select the menu item.\n        This selects the `MenuItem` which runs any associated action with kwargs and\n        then returns whether or not selecting this item should tell the current menu to\n        exit.\n        \"\"\"\nif self.action:\nself.action(**self.kwargs)\nreturn not self.is_exit\n</code></pre>"},{"location":"index.html#quick_menu.menu.MenuItem.select","title":"<code>select()</code>","text":"<p>Select the menu item.</p> <p>This selects the <code>MenuItem</code> which runs any associated action with kwargs and then returns whether or not selecting this item should tell the current menu to exit.</p> Source code in <code>src/quick_menu/menu.py</code> <pre><code>def select(self):\n\"\"\"Select the menu item.\n    This selects the `MenuItem` which runs any associated action with kwargs and\n    then returns whether or not selecting this item should tell the current menu to\n    exit.\n    \"\"\"\nif self.action:\nself.action(**self.kwargs)\nreturn not self.is_exit\n</code></pre>"}]}